# -*- coding: utf-8 -*-
"""Tarea2.1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lAogVPkJZaaqMYfTyQSbMQcxdvsoWBNA
"""

import pandas as pd
import seaborn as sb

datos = pd.read_csv('U4_01_housing.csv')

datos_na = datos.dropna()

dummies = pd.get_dummies(datos_na['ocean_proximity'], dtype=int, drop_first=True)

datos_na = datos_na.join(dummies)

datos_na = datos_na.drop(['ocean_proximity'], axis=1)

sb.set(rc={'figure.figsize':(15,8)})
sb.heatmap(data=datos_na.corr(), annot=True, cmap='YlGnBu' )

datos_na['median_house_value_median_income_rario'] = datos_na['median_house_value'] / datos_na['median_income']

X = datos_na.drop(['median_house_value'], axis=1)
y = datos_na['median_house_value']

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test  = train_test_split(X, y, test_size=.20)

from sklearn.preprocessing import StandardScaler

scaler = StandardScaler(with_mean=False, with_std=False)

X_train = scaler.fit_transform(X_train)
X_test = scaler.fit_transform(X_test)

#entrenar el modelo
from sklearn.linear_model import LinearRegression

modelo = LinearRegression()

modelo.fit(X_train, y_train) # ocurre el entrenamiento

# reralizar las predicciones
predicciones = modelo.predict(X_test)

comparativa = { 'predicciones': predicciones, 'Valor original': y_test }

pd.DataFrame(comparativa)

modelo.score(X_test, y_test)

modelo.score(X_train, y_train)

"""**¿El resultado fue mejor o peor?**
El resultado mejoró llegando a un máximo de 89%

**¿Por qué crees que es así?**
Se agregó un
"""